@page "/authorized/dashboard"
@using HowClient.Infrastructure.DTO.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers
@using HowClient.Configuration
@using HowClient.Infrastructure.DTO.Private.Event
@using HowClient.Infrastructure.Helpers
@using HowClient.Services.Private.Event
@using HowClient.Services.InternalNotification
@using HowClient.Infrastructure.Enums
@using Components
@using HowClient.Common.Routing
@using HowClient.Components.Modals

@inject IEventPrivateService EventPrivateService
@inject AppConfigurations AppConfigurations
@inject NavigationManager NavigationManager
@inject InternalNotificationService InternalNotificationService

<Modal @ref="_modal" Size="ModalSize.Large"></Modal>

<br/>
<div class="d-flex gap-2 mb-8">
    <Dropdown Color="DropdownColor.Primary" Direction="DropdownDirection.DropdownCentered">
        <DropdownToggleButton>@AccessFilter</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="() => AccessFilter = ApiRequestAccessFilter.Own" Type="DropdownItemType.Link">Own</DropdownItem>
            <DropdownItem @onclick="() => AccessFilter = ApiRequestAccessFilter.Shared" Type="DropdownItemType.Link">Shared</DropdownItem>
        </DropdownMenu>
    </Dropdown>
    <Dropdown Color="DropdownColor.Dark" Direction="DropdownDirection.DropdownCentered">
        <DropdownToggleButton>@Status</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="() => Status = EventStatus.None" Type="DropdownItemType.Link">None</DropdownItem>
            <DropdownItem @onclick="() => Status = EventStatus.Inactive" Type="DropdownItemType.Link">Inactive</DropdownItem>
            <DropdownItem @onclick="() => Status = EventStatus.Active" Type="DropdownItemType.Link">Active</DropdownItem>
        </DropdownMenu>
    </Dropdown>
    <Dropdown Color="DropdownColor.Dark">
        <DropdownToggleButton>@AccessType</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="() => AccessType = EventAccessType.None" Type="DropdownItemType.Link">None</DropdownItem>
            <DropdownItem @onclick="() => AccessType = EventAccessType.Private" Type="DropdownItemType.Link">Private</DropdownItem>
            <DropdownItem @onclick="() => AccessType = EventAccessType.Public" Type="DropdownItemType.Link">Public</DropdownItem>
        </DropdownMenu>
    </Dropdown>
    <div class="mb-6">
        <InputText class="form-control" placeholder="Search items..." @bind-Value="_searchQuery"/>
    </div>
    <button class="btn btn-primary" @onclick="ReloadEvents">Reload Events</button>
    <button class="btn btn-primary" @onclick="ShowCreateEventModal">Create new Event</button>
</div>

@if (_count > 0)
{
    <div class="pt-3">
        <Pagination ActivePageNumber="@_currentPageNumber" TotalPages="@_totalPage" PageChanged="OnPageChangedAsync" Alignment="Alignment.Center"/>
    </div>

    @foreach (var item in _eventsToDisplay)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Event Name: @item.Name</h5>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="card-body">
                        <p class="card-text">Created At: @item.CreatedAt</p>
                        <p class="card-text">Access: @item.Access</p>
                        <div class="mb-3">
                            <Switch @onclick="() => OnAccessToggleChanged(item)" Value="item.AccessToggle" ValueExpression="() => item.AccessToggle" Label="Set public"/>
                        </div>
                        <p class="card-text">Status: @item.Status</p>
                        <div class="mb-3">
                            <Switch @onclick="() => OnStatusToggleChanged(item)" Value="item.StatusToggle" ValueExpression="() => item.StatusToggle" Label="Set active"/>
                        </div>
                        <p class="card-text">Likes: @item.Likes</p>
                        <p class="card-text">Dislikes: @item.Dislikes</p>
                        <p class="card-text">Saved: @item.SavedCount</p>
                        <p>Was @item.Duration.ToString(@"dd\.hh\:mm\:ss") ago</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card-body">
                        <img src=@item.Image.ThumbnailHash class="rounded d-block mx-auto" alt="Event Image" IsThumbnail="true" style="height: 200px">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card-body">
                        <div class="card-text">
                            <p class="card-text">Author</p>
                            <p class="card-text">Name: @item.UserInfo.FirstName @item.UserInfo.LastName</p>
                        </div>
                        <div class="card-img-top">
                            <img src=@item.UserInfo.Image.ThumbnailHash class="rounded float-md-none" alt="Author Image" IsThumbnail="true" style="height: 100px">
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" onclick="@(() => NavigateToEventInfo(item.Id))">View Details</button>
            </div>
        </div>
    }
}

<div class="pt-3">
    <Pagination ActivePageNumber="@_currentPageNumber" TotalPages="@_totalPage" PageChanged="OnPageChangedAsync" Alignment="Alignment.Center"/>
</div>

@code {
    [CascadingParameter] 
    Task<AuthenticationState> AuthenticationState { get; set; }

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    private Modal _modal = null!;

    private EventStatus Status { get; set; } = EventStatus.None;
    private EventAccessType AccessType { get; set; } = EventAccessType.None;
    private ApiRequestAccessFilter AccessFilter { get; set; } = ApiRequestAccessFilter.Own;

    private int _count = 0;
    private List<EventItemPrivateModelDTO> _eventsToDisplay = new();
    private Dictionary<int, List<EventItemPrivateModelDTO>> _loadedEvents = new();

    private int _currentPageNumber = 1;
    private readonly int _pageSize = 5;
    private int _totalPage = 1;
    private string _searchQuery = string.Empty;

    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo(Rout.Home.HomePublicPage);
                return;
            }
        }

        _timer = new Timer();
        _timer.Interval = 1000; // Update every second
        _timer.Elapsed += OnTimerElapsed;

        _timer.Start();
        InternalNotificationService.OnError += HandleError;

        await OnPageChangedAsync(_currentPageNumber);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        foreach (var eventItem in _eventsToDisplay)
        {
            eventItem.Duration = DateTime.Now - eventItem.CreatedAt;
        }

        StateHasChanged();
    }

    private async Task ReloadEvents()
    {
        _currentPageNumber = 1;
        _eventsToDisplay.Clear();
        _loadedEvents.Clear();
        await GetCurrentPage();
    }

    private async Task OnPageChangedAsync(int pageNumber)
    {
        _currentPageNumber = pageNumber;

        await GetCurrentPage();
    }

    private async Task GetCurrentPage()
    {
        if (_loadedEvents.TryGetValue(_currentPageNumber, out var events))
        {
            _eventsToDisplay = events;
        }
        else
        {
            if (_currentPageNumber > _totalPage || _currentPageNumber < 1)
            {
                _currentPageNumber = _totalPage == 0 ? 1 : _totalPage;
            }

            await LoadEvents();
            await GetCurrentPage();
        }

        StateHasChanged();
    }

    private async Task LoadEvents()
    {
        var result = await EventPrivateService.GetEventsPagination(
            new GetEventsPaginationPrivateRequestDTO
            {
                Page = _currentPageNumber,
                Size = _pageSize,
                Search = _searchQuery,
                Status = Status,
                Access = AccessType
            },
            AccessFilter);

        foreach (var eventItem in result.Events)
        {
            eventItem.Image.MainHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, eventItem.Image.MainHash);
            eventItem.Image.ThumbnailHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, eventItem.Image.ThumbnailHash);

            eventItem.UserInfo.Image.MainHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, eventItem.UserInfo.Image.MainHash);
            eventItem.UserInfo.Image.ThumbnailHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, eventItem.UserInfo.Image.ThumbnailHash);

            eventItem.Duration = DateTime.Now - eventItem.CreatedAt;
            eventItem.AccessToggle = eventItem.Access == EventAccessType.Public;
            eventItem.StatusToggle = eventItem.Status == EventStatus.Active;
        }

        _count = result.Count;
        _totalPage = (int)Math.Ceiling((double)_count / _pageSize);

        _loadedEvents.TryAdd(_currentPageNumber, result.Events);

        StateHasChanged();
    }

    private async Task ShowCreateEventModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<string>(this, CreateEvent));
        await _modal.ShowAsync<CreateUpdateEventModal>(title:"Create Event", parameters: parameters);
    }

    private async Task CreateEvent(string name)
    {
        await _modal.HideAsync();
        var result = await EventPrivateService.CreateEvent(name);

        if (result > 0)
        {
            await ReloadEvents();
        }
    }

    private void NavigateToEventInfo(int eventId)
    {
        NavigationManager.NavigateTo(Rout.Dashboard.EventPrivatePage(eventId));
    }

    private void OnAccessToggleChanged(EventItemPrivateModelDTO eventItemPrivate)
    {
        eventItemPrivate.AccessToggle = !eventItemPrivate.AccessToggle;
        eventItemPrivate.Access = eventItemPrivate.AccessToggle ? EventAccessType.Public : EventAccessType.Private;
        EventPrivateService.UpdateEventAccessState(eventItemPrivate.Id, eventItemPrivate.AccessToggle);
    }

    private void OnStatusToggleChanged(EventItemPrivateModelDTO eventItemPrivate)
    {
        eventItemPrivate.StatusToggle = !eventItemPrivate.StatusToggle;
        eventItemPrivate.Status = eventItemPrivate.StatusToggle ? EventStatus.Active : EventStatus.Inactive;
        EventPrivateService.UpdateEventActiveState(eventItemPrivate.Id, eventItemPrivate.StatusToggle);
    }

    private void HandleError(string message)
    {
        ErrorComponent.ShowError("Error!", message);
    }
}