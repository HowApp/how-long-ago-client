@page "/dashboard/event/{EventId:int:min(1)}/record"

@using System.Timers
@using HowClient.Components
@using HowClient.Configuration
@using HowClient.Infrastructure.DTO.Models
@using HowClient.Infrastructure.DTO.Private.Record
@using HowClient.Infrastructure.Enums
@using HowClient.Infrastructure.Helpers
@using HowClient.Services.InternalNotification
@using HowClient.Services.Private.Event
@using HowClient.Services.Private.Record
@using Microsoft.AspNetCore.Components.Authorization

@inject IRecordPrivateService RecordPrivateService
@inject IEventPrivateService EventPrivateService
@inject AppConfigurations AppConfigurations
@inject NavigationManager NavigationManager
@inject InternalNotificationService InternalNotificationService

<h3>DashboardEvent</h3>

@if (_event is not null)
{
    <div class="card">
        <div class="card-header">
            <h5 class="card-title">Event Name: @_event.Name</h5>
        </div>
        <div class="row" >
            <div class="col-md-4">
                <div class="card-body">
                    <p class="card-text">Created At: @_event.CreatedAt</p>
                    <p class="card-text">Access: @_event.Access</p>
                    <div class="mb-3">
                        <Switch @onclick="() => OnAccessToggleChanged()" Value="_event.AccessToggle" ValueExpression="() => _event.AccessToggle" Label="Set public"/>
                    </div>
                    <p class="card-text">Status: @_event.Status</p>
                    <div class="mb-3">
                        <Switch @onclick="() => OnStatusToggleChanged()" Value="_event.StatusToggle" ValueExpression="() => _event.StatusToggle" Label="Set active"/>
                    </div>
                    <p class="card-text">Likes: @_event.Likes</p>
                    <p class="card-text">Dislikes: @_event.Dislikes</p>
                    <p class="card-text">Saved: @_event.SavedCount</p>
                    <p>Was @_event.Duration.ToString(@"dd\.hh\:mm\:ss") ago</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card-body">
                    <img src=@_event.Image.ThumbnailHash class="rounded d-block mx-auto" alt="Event Image" IsThumbnail="true" style="height: 200px">
                </div>
            </div>
            <div class="col-md-4">
                <div class="card-body">
                    <div class="card-text">
                        <p class="card-text">Author</p>
                        <p class="card-text">Name: @_event.UserInfo.FirstName @_event.UserInfo.LastName</p>
                    </div>
                    <div class="card-img-top">
                        <img src=@_event.UserInfo.Image.ThumbnailHash class="rounded float-md-none" alt="Author Image" IsThumbnail="true" style="height: 100px">
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // TODO Load Records from API
    
    [Parameter]
    public int EventId { get; set; }
    
    [CascadingParameter] 
    Task<AuthenticationState> AuthenticationState { get; set; }
    
    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }
    
    private int _count = 0;
    private EventItemPrivateModelDTO _event;
    private List<RecordItemPrivateModelDTO> _recordsToDisplay = new();
    private Dictionary<int, List<RecordItemPrivateModelDTO>> _loadedRecords = new();
    
    private int _currentPageNumber = 1;
    private int _pageSize = 5;
    private int _totalPage = 1;
    
    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"/");
                return;
            }
        }
        
        _timer = new Timer();
        _timer.Interval = 1000; // Update every second
        _timer.Elapsed += OnTimerElapsed;

        _timer.Start();
        
        InternalNotificationService.OnError += HandleError;
        
        await OnPageChangedAsync(_currentPageNumber);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        _event.Duration = DateTime.Now - _event.CreatedAt;

        StateHasChanged();
    }
    
    private async Task OnPageChangedAsync(int pageNumber)
    {
        _currentPageNumber = pageNumber;

        await LoadEventDetail();
        await GetCurrentPage();
    }
    
    private async Task GetCurrentPage()
    {
        if (_loadedRecords.TryGetValue(_currentPageNumber, out var events))
        {
            _recordsToDisplay = events;
        }
        else
        {
            if (_currentPageNumber > _totalPage || _currentPageNumber < 1)
            {
                _currentPageNumber = _totalPage;
            }
            await LoadRecords();
            await GetCurrentPage();
        }
        
        StateHasChanged();
    }
    
    private async Task LoadRecords()
    {
        var result = await RecordPrivateService.GetRecordsPagination(
            EventId,
            new GetRecordsPaginationPrivateRequestDTO
            {
                Page = _currentPageNumber,
                Size = _pageSize
            });

        foreach (var recordItem in result.Records)
        {
            foreach (var imageItem in recordItem.Images)
            {
                imageItem.MainHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, imageItem.MainHash);
                imageItem.ThumbnailHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, imageItem.ThumbnailHash);
            }
        }
        
        _count = result.Count;
        _totalPage = (int)Math.Ceiling((double)_count / _pageSize);

        _loadedRecords.TryAdd(_currentPageNumber, result.Records);
    }

    private async Task LoadEventDetail()
    {
        _event = await EventPrivateService.GetEventById(EventId, ApiRequestAccessFilter.IncludeShared);

        _event.Image.MainHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, _event.Image.MainHash);
        _event.Image.ThumbnailHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, _event.Image.ThumbnailHash);

        _event.UserInfo.Image.MainHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, _event.UserInfo.Image.MainHash);
        _event.UserInfo.Image.ThumbnailHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, _event.UserInfo.Image.ThumbnailHash);

        _event.Duration = DateTime.Now - _event.CreatedAt;
        _event.AccessToggle = _event.Access == EventAccessType.Public;
        _event.StatusToggle = _event.Status == EventStatus.Active;
    }
    
    private void OnAccessToggleChanged()
    {
        _event.AccessToggle = !_event.AccessToggle;
        _event.Access = _event.AccessToggle ? EventAccessType.Public : EventAccessType.Private;
        EventPrivateService.UpdateEventAccessState(_event.Id, _event.AccessToggle);
    }
    
    private void OnStatusToggleChanged()
    {
        _event.StatusToggle = !_event.StatusToggle;
        _event.Status = _event.StatusToggle ? EventStatus.Active : EventStatus.Inactive;
        EventPrivateService.UpdateEventActiveState(_event.Id, _event.StatusToggle);
    }

    private void HandleError(string message)
    {
        ErrorComponent.ShowError("Error!", message);
    }
}