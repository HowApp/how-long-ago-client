@page "/event/{EventId:int:min(1)}/record"
@using HowClient.Configuration
@using HowClient.Infrastructure.DTO.Models
@using HowClient.Infrastructure.DTO.Public.Record
@using HowClient.Infrastructure.Helpers
@using HowClient.Services.Public.Record

@inject IRecordService RecordService;
@inject AppConfigurations AppConfigurations

<h3>Event</h3>

@if (_count > 0)
{
    <div>
        <Pagination ActivePageNumber="@_currentPageNumber" TotalPages="@_totalPage" PageChanged="OnPageChangedAsync" Alignment="Alignment.Center"/>
    </div>
    
    foreach (var record in _recordsToDisplay)
    {
        <div class="card">
            <div class="row" >
                <div class="col-md-4">
                    <div class="card-body">
                        <p class="card-text">Created At: @record.CreatedAt</p>
                        <p class="card-text">Description: @record.Description</p>
                        <p class="card-text">Likes: @record.Likes</p>
                        <p class="card-text">Dislikes: @record.Dislikes</p>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        @if (record.Images.Any())
                        {
                            <Carousel>
                                <CarouselItem Active="true">
                                    <img src=@record.Images.First().ThumbnailHash class="rounded float-md-none" alt="Record Image" IsThumbnail="true" style="height: 200px">
                                </CarouselItem>
                            
                                @for (int i = 1; i < record.Images.Count; i++ )
                                {
                                    <CarouselItem>
                                        <img src=@record.Images[i].ThumbnailHash class="rounded float-md-none" alt="Record Image" IsThumbnail="true" style="height: 200px">
                                    </CarouselItem>
                                }
                            </Carousel>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}
@code {
    [Parameter]
    public int EventId { get; set; }
    
    private int _count = 0;
    private List<RecordItemModelDTO> _recordsToDisplay = new();
    private Dictionary<int, List<RecordItemModelDTO>> _loadedRecords = new();
    
    private int _currentPageNumber = 1;
    private readonly int _pageSize = 5;
    private int _totalPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await OnPageChangedAsync(_currentPageNumber);
    }
    
    private async Task OnPageChangedAsync(int pageNumber)
    {
        _currentPageNumber = pageNumber;

        await GetCurrentPage();
    }
    
    private async Task GetCurrentPage()
    {
        if (_loadedRecords.TryGetValue(_currentPageNumber, out var events))
        {
            _recordsToDisplay = events;
        }
        else
        {
            if (_currentPageNumber > _totalPage || _currentPageNumber < 1)
            {
                _currentPageNumber = _totalPage;
            }
            await LoadRecords();
            await GetCurrentPage();
        }
        
        StateHasChanged();
    }
    
    private async Task LoadRecords()
    {
        var result = await RecordService.GetRecordsPagination(
            EventId,
            new GetRecordsPaginationRequestDTO
            {
                Page = _currentPageNumber,
                Size = _pageSize
            });

        foreach (var recordItem in result.Records)
        {
            foreach (var imageItem in recordItem.Images)
            {
                imageItem.MainHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, imageItem.MainHash);
                imageItem.ThumbnailHash = ImagePathHelper.GetPath(AppConfigurations.BackendUrl, imageItem.ThumbnailHash);

            }
        }
        
        _count = result.Count;
        _totalPage = (int)Math.Ceiling((double)_count / _pageSize);

        _loadedRecords.TryAdd(_currentPageNumber, result.Records);
        
        StateHasChanged();
    }
}