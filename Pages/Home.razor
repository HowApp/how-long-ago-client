@page "/"
@using HowClient.Infrastructure.DTO.Models
@using HowClient.Infrastructure.DTO.Public.Event
@using HowClient.Services.Public.Event
@using Microsoft.AspNetCore.Components.Authorization

@inject IEventService _EventService

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello @UserName !!</h1>
        <p>Welcome to your new app.</p>
        <p>Welcome to Blazor Learner.</p>
    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>

<div>Hello user</div>

<button class="btn btn-primary" @onclick="LoadEvents">Click me</button>
<br/>
@if (_count != 0)
{
    <a>Total Count @_count</a>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Access</th>
            <th>Created At</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _events)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Access</td>
                <td>@item.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code{
    string? UserName { get; set; }

    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; }

    private GetEventsPaginationPublicResponseDTO Events = new ();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                UserName = user.Identity.Name;
            }
        }

        
    }

    private int _count = 0;
    private List<EventItemModelDTO> _events = new List<EventItemModelDTO>();
    
    private async Task LoadEvents()
    {
        var result = await _EventService.GetEventsPagination();

        _count = result.Count;
        _events.AddRange(result.Events);
        
        StateHasChanged();
        await Task.Delay(500);
    }
}