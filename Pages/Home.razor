@page "/"
@using HowClient.Configuration
@using HowClient.Infrastructure.DTO.Models
@using HowClient.Infrastructure.DTO.Public.Event
@using HowClient.Infrastructure.Helpers
@using HowClient.Services.Public.Event
@using Microsoft.AspNetCore.Components.Authorization

@inject IEventService _EventService
@inject AppConfigurations _AppConfigurations

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello @UserName !!</h1>
        <p>Welcome to your new app.</p>
        <p>Welcome to Blazor Learner.</p>
    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>

<div>Hello user</div>

<button class="btn btn-primary" @onclick="LoadEvents">Click me</button>
<br/>

@if (_count != 0)
{
    <a>Total Count @_count</a>
    @foreach (var item in _events)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Event Name: @item.Name</h5>
            </div>
            <div class="row" >
                <div class="col-md-6">
                    <div class="card-body">
                        <p class="card-text">Created At: @item.CreatedAt</p>
                        <p class="card-text">Access: @item.Access</p>
                        <p class="card-text">Likes: @item.Likes</p>
                        <p class="card-text">Dislikes: @item.Dislikes</p>
                        <p class="card-text">Saved: @item.SavedCount</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card-body">
                        <img src=@item.Image.ThumbnailHash class="rounded float-end" alt="Event Image" IsThumbnail="true" style="height: 200px">
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary">View Details</button>
                </div>
            </div>
        </div>
    }
}

@code{
    string? UserName { get; set; }

    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; }

    private GetEventsPaginationPublicResponseDTO Events = new ();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                UserName = user.Identity.Name;
            }
        }
    }

    private int _count = 0;
    private List<EventItemModelDTO> _events = new List<EventItemModelDTO>();
    
    private async Task LoadEvents()
    {
        var result = await _EventService.GetEventsPagination();

        foreach (var eventItem in result.Events)
        {
            eventItem.Image.MainHash = ImagePathHelper.GetPath(_AppConfigurations.BackendUrl, eventItem.Image.MainHash);
            eventItem.Image.ThumbnailHash = ImagePathHelper.GetPath(_AppConfigurations.BackendUrl, eventItem.Image.ThumbnailHash);
        }
        
        _count = result.Count;
        _events.AddRange(result.Events);
        
        StateHasChanged();
        await Task.Delay(500);
    }
}