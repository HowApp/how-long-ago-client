@using Microsoft.AspNetCore.Components.Authorization
@using Components
@using HowClient.Common.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@implements IErrorComponent

<div class="bb-page">
    <Sidebar @ref="_sidebar"
             IconName="IconName.HSquare"
             Title="HOW"
             BadgeText="v1.0.0"
             DataProvider="SidebarDataProvider" />

    <Offcanvas @ref="_offcanvas" />

    <main>
        <div class="bb-top-row px-4 d-flex justify-content-between align-items-center header-container">
            <!-- Left Side (empty) for spacing -->
            <div class="left-side"></div>

            <!-- Centered Logo -->
            <div class="text-center logo-container">
                <NavLink href="/">
                    <img src="logo.webp" class="project-icon" alt="Project Icon"/>
                </NavLink>
            </div>

            <!-- Right Side: About and Buttons -->
            <div class="right-side d-flex align-items-center">
                <a href="https://docs.microsoft.com/aspnet/" target="_blank" class="mr-3">About</a>
                <AuthorizeView>
                    <Authorized>
                        <button type="button" class="btn btn-link mr-3" @onclick="@LogoutClick">Logout</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-link mr-3" @onclick="@LoginClick">Login</button>
                    </NotAuthorized>
                </AuthorizeView>
                <button type="button" class="btn btn-link" @onclick="@ShowOffCanvasContent">
                    Notifications <Badge Color="BadgeColor.Danger"><Icon Name="IconName.Bicycle"/> @_errors.Count</Badge>
                </button>
            </div>
        </div>

        <article class="content px-4">
            <CascadingValue Value="this" Name="ErrorComponent">
                <div class="py-2">@Body</div>
            </CascadingValue>
        </article>
    </main>

</div>

@code {
    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; }

    bool _isAuthorized;

    private Sidebar _sidebar;
    IEnumerable<NavItem> _navItems;

    private Offcanvas _offcanvas;

    private Dictionary<long, (string title, string message)> _errors = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (AuthenticationState is not null)
        {
            var user = (await AuthenticationState).User;

            // Check if the user is authenticated
            _isAuthorized = user.Identity != null && user.Identity.IsAuthenticated;
        }
    }

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (_navItems is null)
            _navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(_navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        _navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = _isAuthorized ? Rout.Home.HomePrivatePage : Rout.Home.HomePublicPage, IconName = IconName.HouseDoorFill, Text = "Home", Match=NavLinkMatch.All},
            new NavItem { Id = "2", Href = Rout.Dashboard.PrivatePage, IconName = IconName.Database, Text = "Dashboard"},
            new NavItem { Id = "3", Href = "/hub-test", IconName = IconName.Github, Text = "HubTest"}
        };

        return _navItems;
    }

    void LogoutClick()
    {
        NavigationManager.NavigateToLogout(Rout.LogoutIdentity);
    }

    void LoginClick()
    {
        NavigationManager.NavigateToLogin(Rout.LoginIdentity);
    }

    public void ShowError(string title, string message)
    {
        _errors.Add(DateTime.UtcNow.ToBinary(), (title, message));
        StateHasChanged();
    }

    private async Task ShowOffCanvasContent()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("ErrorsToDisplay", _errors.Select(x => (x.Key, x.Value.title, x.Value.message)));
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<long>(this, RemoveErrorItem));

        await _offcanvas.ShowAsync<ErrorItemOffCanvasComponent>(title: "Errors List", parameters: parameters);
    }

    public void RemoveErrorItem(long errorId)
    {
        _errors.Remove(errorId);
    }
}