@using HowClient.Services.Provider
@using Microsoft.AspNetCore.Components.Authorization
@using Components

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject CustomStateProvider AuthStateProvider
@implements IErrorComponent

<div class="bb-page">

    <Sidebar @ref="sidebar"
             IconName="IconName.BootstrapFill"
             Title="Blazor Bootstrap"
             DataProvider="SidebarDataProvider" />

    <main>
        <div class="bb-top-row px-4 d-flex justify-content-end">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            <AuthorizeView>
                <Authorized>
                    <button type="button" class="btn btn-link ml-md-auto" @onclick="@LogoutClick">Logout</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-link ml-md-auto" @onclick="@LoginClick">Login</button>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">

            @if (isErrorActive)
            {
                <div class="alert alert-danger" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="HideError">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h3>@title</h3>
                    <p>@message</p>
                </div>
            }
            <CascadingValue Value="this" Name="ErrorComponent">
                <div class="py-2">@Body</div>
            </CascadingValue>
        </article>
    </main>

</div>

@code {
    Sidebar sidebar;
    IEnumerable<NavItem> navItems;
    
    bool isErrorActive;
    string title;
    string message;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Home", Match=NavLinkMatch.All},
            new NavItem { Id = "2", Href = "/counter", IconName = IconName.PlusSquareFill, Text = "Counter"},
            new NavItem { Id = "3", Href = "/dashboard", IconName = IconName.Database, Text = "Dashboard"},
            new NavItem { Id = "4", Href = "/hub-test", IconName = IconName.Github, Text = "HubTest"}
        };

        return navItems;
    }
    
    async Task LogoutClick()
    {
        await AuthStateProvider.Logout();
        NavigationManager.NavigateTo("/login");
    }
    
    async Task LoginClick()
    {
        NavigationManager.NavigateTo("/login");
    }

    public void ShowError(string title, string message)
    {
        isErrorActive = true;
        title = title;
        message = message;
        StateHasChanged();
    }

    private void HideError()
    {
        isErrorActive = false;
    }
}